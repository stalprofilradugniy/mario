// scripts/level.js

// Импортируем необходимые константы
import { TILE_SIZE, GAME_HEIGHT } from './constants.js';
// Импортируем классы объектов, которые могут появиться на уровне
import { Block } from './block.js';
import { Goomba } from './enemy.js';
// import { Mushroom } from './items.js'; // Если есть отдельный файл для предметов


// Пример данных уровня (2D массив плиток/объектов)
// КАЖДЫЙ ЭКСПОРТИРУЕМ ЭТИ ДАННЫЕ
export const level1_1_data = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 2, 2, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // Goomba и блоки
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // Земля
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // Земля
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // Земля
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // Земля
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] // Земля
];

/**
 * Загружает объекты для заданного уровня.
 * Парсит 2D массив данных уровня и создает экземпляры игровых объектов.
 * @param {Array<Array<number>>} levelData - 2D массив, представляющий данные уровня.
 * @returns {object} Объект, содержащий массивы созданных блоков и врагов, и начальную позицию игрока.
 */
export function loadLevel(levelData) { // КАЖДЫЙ ЭКСПОРТИРУЕМ ЭТУ ФУНКЦИЮ
    const levelObjects = {
        blocks: [],         // Массив объектов Block
        enemies: [],        // Массив объектов Enemy
        playerStart: null   // Начальная позиция игрока {x, y}
        // items: []         // Массив предметов (если они создаются при загрузке уровня)
    };

    // Перебираем строки (y-координата)
    for (let row = 0; row < levelData.length; row++) {
        // Перебираем столбцы (x-координата)
        for (let col = 0; col < levelData[row].length; col++) {
            const tileType = levelData[row][col];
            // Вычисляем позицию объекта на canvas
            const x = col * TILE_SIZE;
            const y = row * TILE_SIZE;

            // Создаем объекты в зависимости от типа плитки
            switch (tileType) {
                case 1: // Земля / Твердый блок
                    levelObjects.blocks.push(new Block(x, y, 'solid'));
                    break;
                case 2: // Кирпичный блок
                    levelObjects.blocks.push(new Block(x, y, 'brick'));
                    break;
                case 3: // Блок со знаком вопроса (добавим логику содержимого позже)
                     levelObjects.blocks.push(new Block(x, y, 'question', 'coin')); // Указываем содержимое
                     break;
                case 4: // Goomba
                    levelObjects.enemies.push(new Goomba(x, y));
                    break;
                 // case 7: // Начальная позиция игрока
                 //     levelObjects.playerStart = { x: x, y: y };
                 //     break;
                // Игнорируем 0 (пустоту) и другие неописанные типы
            }
        }
    }

    // Если начальная позиция игрока не была указана в данных уровня (например, кодом 7)
    // Устанавливаем позицию по умолчанию
    // (Нужно импортировать константы DEFAULT_PLAYER_START_X, DEFAULT_PLAYER_START_Y, GAME_HEIGHT, TILE_SIZE)
     if (levelObjects.playerStart === null) {
          levelObjects.playerStart = { x: TILE_SIZE * 2, y: GAME_HEIGHT - TILE_SIZE * 3 }; // Старт над землей
     }


    // Возвращаем все созданные объекты уровня
    return levelObjects;
}

// (Можно добавить другие уровни или функции для переключения между ними)
// export const level1_2_data = [...]; // Экспортируем другие уровни, если они есть
// export function loadLevel2(...) { ... }
